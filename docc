#!/usr/bin/env bash

# author Błażej Rybarkiewicz www.github.com/abryb

USAGE=$(cat <<USAGE
Script locating closest docker-compose.yml (or yaml) file and executing it
If there is 'docc.sh' file in same directory, it will be executed instead of regular 'docker-compose'
Usage:
    $0 <docker-compose arguments>
Options:
    ?, --help                 print help
Special commands:
    file                      prints relative path to found file
                              $0 file # ./../foo/bar/docker-compose.yaml
    file <command> [args..]   executes custom command on configuration file
                              Examples:
                              $0 file less
                              $0 file realpath
                              $0 file chmod 777
    dir                       prints absolute path to found file directory
                              $0 dir # /home/user/foo/bar
    script                    prints associated docc.sh content if exists
    env                       prints found file linked .env file content
    self-update               update docc script from https://raw.githubusercontent.com/abryb/docc/master/docc
USAGE
)

case $1 in
    --help | ?)
        echo "$USAGE"
        exit 0
    ;;
    self-update )
        echo curl -s https://raw.githubusercontent.com/abryb/docc/master/docc -o "${BASH_SOURCE[0]}"
        curl -s https://raw.githubusercontent.com/abryb/docc/master/docc -o "${BASH_SOURCE[0]}"
        exit 0
    ;;
esac

init_directory=$(pwd)

find_patterns=(
".                -maxdepth 1" # in current
".                -maxdepth 2" # in child
"./..             -maxdepth 1" # in parent
"./..             -maxdepth 2" # in parent child
"./../..          -maxdepth 1" # in parent parent
".                -maxdepth 3" # in child child
"./../../..       -maxdepth 1" # in parent parent parent
"./../..          -maxdepth 2" # in parent parent child
"./../../../..    -maxdepth 1" # in parent parent parent parent
"./../../..       -maxdepth 2" # in parent parent parent child
"./../../../../.. -maxdepth 1" # in parent parent parent parent parent
)

# path to configuration file
file=""
function find_in_pattern() {
    find_result="$(find $1 -type f -regextype posix-extended -regex '.*/docker-compose\.ya?ml' 2>/dev/null)"
    find_result_c=$(echo "$find_result" | wc -l)

    if [[ "$find_result_c" -eq "1" ]] && [[ "$find_result" != "" ]]; then
        file="$find_result"
        return 0
    fi

    if [[ "$find_result_c" -gt "1" ]]; then
        echo "Found more than 1 docker-compose file:"
        echo "$find_result"
        exit 1
    fi
    return 1
}


for pattern in "${find_patterns[@]}"; do
    if find_in_pattern "$pattern" ; then
        file="$file"
        file_dir=$(dirname "$file")
        case $1 in
            file )
                if [[ "$2" != "" ]]; then
                    exec "$2" "$file" "${@:3}"
                fi
                exec realpath --relative-to="$init_directory" "$file" ;;
            dir )
                exec realpath "$file_dir" ;;
            script )
                exec cat "$file_dir/docc.sh" ;;
            env )
                if [[ -f "$file_dir/.env" ]]; then
                    cat "$file_dir/.env"
                fi
                exit 0
            ;;
            * )
                # execute docc.sh wrapper file if exists in same directory as docker-compose.yaml file
                cd $(dirname $file)
                if [[ -f "docc.sh" ]]; then

                    if [[ -f ".env" ]]; then
                        set -a
                        source ".env"
                        set +a
                    fi
                    exec ./docc.sh "$@"
                fi
                exec docker-compose "$@"
            ;;
        esac
        break;
    fi
done

echo "docker-compose configuration file not found" 1>&2
exit 1
